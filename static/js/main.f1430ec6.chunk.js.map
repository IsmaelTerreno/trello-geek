{"version":3,"sources":["TaskCard.js","ColumnCards.js","TaskCardForm.js","App.js","redux/actions/task.js","redux/reducers/task.js","containers/AppContainer.js","reportWebVitals.js","redux/reducers/index.js","redux/store/configureStore.js","index.js"],"names":["CATEGORY_COLOR","green","yellow","red","useStyles","makeStyles","theme","paper","padding","spacing","margin","color","cursor","title","fontSize","textAlign","label","backgroundColor","width","borderRadius","marginBottom","editIcon","visibility","closeIcon","ItemTypes","TaskCard","task","onClickEdit","classes","useState","isEditHover","setIsEditHover","useDrag","type","item","id","labelColor","description","order","collect","monitor","isDragging","drag","onMouseEnter","onMouseLeave","Paper","className","ref","style","Grid","container","xs","Box","component","onClick","Typography","variant","palette","text","secondary","fontWeight","marginLeft","addBtn","addIcon","position","top","columnNaneInput","Droppable","children","onDragItemTask","columnTasks","columnId","useDrop","accept","drop","dataDroppable","dataDragable","dataDragableColumnId","forEach","columnX","taskFreshInfo","tasks","find","x","canDrop","isOver","transition","ColumnCards","cards","onAddTask","onEditCard","onEditColumnName","isEditMode","setIsEditMode","TextField","fullWidth","defaultValue","onBlur","evt","target","value","length","map","defaultProps","menuOptions","Object","keys","descriptionInput","marginTop","TaskCardForm","open","onClose","onSave","onDelete","onCancel","taskInput","setTaskInput","useEffect","uuidv4","CardGrid","onSubmit","event","preventDefault","Select","menuItem","MenuItem","multiline","rows","Button","Dialog","aria-labelledby","root","flexGrow","titleApp","paddingLeft","App","onDeleteTask","onCancelEdit","currentTask","isEditionMode","onSaveTask","column","idx","SET_CURRENT_TASK","SET_TASK_LIST","SET_EDITION_MODE","SAVE_TASK","REPLACE_ORDER_TASK","RENAME_COLUMN_NAME","DELETE_TASK","setCurrentTask","setEditionMode","initState","current","list","byTaskOrder","a","b","getTaskList","createSelector","state","getCurrentTask","getIsEditionMode","connect","dispatch","newTask","push","taskId","deleteTask","saveTask","originalTask","originalTaskColumnId","newTaskColumnId","replaceOrderTask","newName","renameColumnById","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","taskListSet","sort","updatedTaskList","taskX","allColumns","orderSameColumn","taskA","taskB","replacedOrderTaskList","filter","insertTask","columnUpdate","deletedItemTaskList","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","ReactDOM","render","DndProvider","backend","HTML5Backend","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.f1430ec6.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Paper, Typography, Box, Grid } from '@material-ui/core';\nimport PropTypes from 'prop-types';\nimport EditIcon from '@material-ui/icons/Edit';\nimport { useDrag } from 'react-dnd';\n\nconst CATEGORY_COLOR = {\n    green: '#1dc33b',\n    yellow: '#f7d400',\n    red: '#fd4d39',  \n};\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    padding: theme.spacing(1),\n    margin: theme.spacing(1),\n    color:'#0f1e3d',\n    cursor: 'pointer',\n  },\n  title:{\n    fontSize:'15px',\n    textAlign: 'left',\n  },\n  label:{\n    backgroundColor: CATEGORY_COLOR.green,\n    padding: '4px',\n    width: '37px',\n    borderRadius: '5px',\n    marginBottom: '5px'\n  },\n  editIcon:{\n    fontSize:'15px',\n    visibility: 'hidden',\n  },\n  closeIcon:{\n    fontSize:'15px',\n    cursor:'pointer',\n  },\n}));\n\nexport const ItemTypes = {\n  TASK: 'task'\n}\n\nconst TaskCard = ({\n  task,\n  onClickEdit,\n}) => {\n  const classes = useStyles();\n  const [ isEditHover, setIsEditHover ] = useState(false);\n  const [{ isDragging }, drag] = useDrag(() => ({\n      type: ItemTypes.TASK,\n      item: { \n        id: task.id,\n        labelColor: task.labelColor,\n        description: task.description,\n        order: task.order,\n      },\n      collect: (monitor) => ({\n        isDragging: !!monitor.isDragging()\n      })\n    }),\n    [task]\n  );\n  return (\n    <div  \n      onMouseEnter={()=> setIsEditHover(true)} \n      onMouseLeave={()=> setIsEditHover(false)}\n    >\n      <Paper \n      className={classes.paper} \n      ref={drag}\n      style={{\n        visibility: isDragging ? 'hidden' : 'visible',\n        cursor: 'move',\n      }}\n      >\n        <Grid container spacing={0}>\n            <Grid item xs={11}>\n                <Box component=\"div\" className={classes.label} style={{backgroundColor: CATEGORY_COLOR[task.labelColor]}} />\n            </Grid>\n            <Grid item xs={1}>\n                <EditIcon \n                className={classes.closeIcon} \n                style={{visibility: !isEditHover || isDragging ? 'hidden' : 'visible' }}\n                onClick={onClickEdit}\n                />\n            </Grid>\n            <Grid item xs={12}>\n              <Typography\n              className={classes.title}\n              variant=\"body2\"\n              >\n                {task.description}\n              </Typography>\n            </Grid>\n        </Grid>\n      </Paper>\n    </div>\n  );\n}\n\nconst taskShape = PropTypes.shape({\n  id: PropTypes.string,\n  labelColor: PropTypes.oneOf(['green', 'yellow', 'red']),\n  description: PropTypes.string\n});\n\nTaskCard.propTypes = {\n    task: taskShape,\n    onClickEdit: PropTypes.func,\n};\n\nexport default TaskCard;\n","import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Paper, Typography, Box, TextField } from '@material-ui/core';\nimport PropTypes from 'prop-types';\nimport TaskCard, { ItemTypes } from './TaskCard';\nimport AddIcon from '@material-ui/icons/Add';\nimport { useDrop } from 'react-dnd';\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    padding: theme.spacing(1),\n    color: theme.palette.text.secondary,\n    backgroundColor:'#ebecf0',\n  },\n  title:{\n    fontSize:'15px',\n    color:'#0f1e3d',\n    fontWeight: 'bold',\n    textAlign: 'left',\n    marginLeft: theme.spacing(1),\n    cursor:'pointer',\n  },\n  addBtn:{\n    color: '#697889',\n    marginLeft: theme.spacing(1),\n    fontSize:'17px',\n    cursor: 'pointer',\n  },\n  addIcon:{\n      position:'relative',\n      top:'5px',\n  },\n  columnNaneInput:{\n    padding: '0',\n    '& input':{\n      padding:'6px'\n    }\n  },\n}));\n\nconst Droppable = ({\n  children, \n  onDragItemTask, \n  task, \n  columnTasks, \n  columnId,\n})=>{\n  const [ { isOver }, drop] = useDrop(\n    () => ({\n      accept: ItemTypes.TASK,\n      drop: (item) => {\n        const dataDroppable = task;\n        let dataDragable = item;\n        let dataDragableColumnId = '';\n        columnTasks.forEach(columnX => {\n          const taskFreshInfo = columnX.tasks.find(x => x.id === item.id);\n          if(taskFreshInfo){\n            dataDragable = taskFreshInfo;\n            dataDragableColumnId = columnX.id;\n          }\n        });\n        onDragItemTask(dataDroppable, dataDragable, dataDragableColumnId, columnId);\n      },\n      canDrop: (item) => item.id !== task.id,\n      collect: (monitor) => ({\n        isOver: !!monitor.isOver(),\n      })\n    })\n  );\n  return (\n    <div            \n      ref={drop}\n      style={{\n        borderRadius:'5px',\n        transition: 'background-color 0.5s',\n        backgroundColor: (isOver) ? '#9e9faf': 'transparent',\n      }}\n    >\n      {children}\n    </div>\n  );\n};\n\nconst ColumnCards = ({\n  title, \n  cards, \n  onAddTask,\n  onEditCard,\n  onDragItemTask,\n  columnTasks,\n  columnId,\n  onEditColumnName,\n}) => {\n  const classes = useStyles();\n  const [ isEditMode, setIsEditMode ] = useState(false);\n  return (\n    <Paper className={classes.paper}>\n        <Box \n          component=\"div\" \n          onClick={()=>{\n            setIsEditMode(true);\n          }}\n        >\n          { \n            isEditMode &&\n            <TextField\n              id=\"columnNameInput\"\n              fullWidth\n              variant=\"outlined\"\n              className={classes.columnNaneInput} \n              defaultValue={title}\n              onBlur={(evt)=> {\n                setIsEditMode(false);\n                onEditColumnName(columnId, evt.target.value);\n              }}\n            />\n          }\n          { \n            !isEditMode &&\n            <Typography  \n            className={classes.title}\n            variant=\"h6\"\n            >\n                {title}\n            </Typography>\n          }\n        </Box>\n        {\n           cards.length > 0 && \n           cards.map((task)=> {\n            return(\n                <Droppable \n                  key={task.id}\n                  onDragItemTask={onDragItemTask}\n                  task={task}\n                  columnTasks={columnTasks}\n                  columnId={columnId}\n                >\n                  <TaskCard\n                    task={task}\n                    onClickEdit={()=> onEditCard(task)}\n                  />\n                </Droppable>\n            );\n           })\n        }\n        <Typography  \n        className={classes.addBtn}\n        variant=\"subtitle2\"\n        onClick={onAddTask}\n        >\n            <AddIcon className={classes.addIcon}/> Add another card\n        </Typography>\n    </Paper>\n  );\n}\n\nColumnCards.defaultProps = {\n    title:'',\n    cards:[],\n};\n\nColumnCards.propTypes = {\n    title: PropTypes.string.isRequired,\n    cards: PropTypes.arrayOf(PropTypes.shape({\n        labelColor: PropTypes.string,\n        description: PropTypes.string\n    })),\n    onAddTask: PropTypes.func.isRequired,\n    onDragItemTask: PropTypes.func.isRequired,\n    columnTasks: PropTypes.array.isRequired,\n    columnId: PropTypes.string.isRequired,\n    onEditColumnName: PropTypes.string.isRequired,\n};\n\nexport default ColumnCards;\n","import React, {useState, useEffect} from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { \n  Paper, \n  Box, \n  Grid, \n  Dialog, \n  TextField, \n  Button, \n  Select,\n  MenuItem,\n } from '@material-ui/core';\nimport PropTypes from 'prop-types';\nimport { v4 as uuidv4 } from 'uuid';\n\nconst CATEGORY_COLOR = {\n    green: '#1dc33b',\n    yellow: '#f7d400',\n    red: '#fd4d39',  \n};\nconst menuOptions = Object.keys(CATEGORY_COLOR); \nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    padding: theme.spacing(1),\n    margin: theme.spacing(1),\n    color:'#0f1e3d',\n    cursor: 'pointer',\n  },\n  title:{\n    fontSize:'15px',\n    textAlign: 'left',\n  },\n  label:{\n    padding: '14px',\n    width: '37px',\n    borderRadius: '5px',\n    marginLeft:'5px',\n  },\n  descriptionInput:{\n    marginTop: '15px',\n    marginBottom: '15px'\n  },\n  editIcon:{\n    fontSize:'15px',\n    visibility: 'hidden',\n  },\n  closeIcon:{\n    fontSize:'15px',\n    cursor:'pointer',\n  },\n}));\n\nconst TaskCardForm = ({\n  task,\n  open,\n  onClose,\n  onSave,\n  onDelete,\n  onCancel,\n}) => {\n  const classes = useStyles();\n  const newTask = () => ({\n    id: uuidv4(), \n    labelColor: 'green',\n    description: '',\n  });\n  const [ taskInput, setTaskInput ] = useState({...task});\n  useEffect(() => {\n    if(!open){\n      setTaskInput(newTask());\n    } else {\n      setTaskInput({...task})\n    }\n  },[open, task]);\n  const CardGrid = () => {\n    return(\n      <form \n      id=\"taskForm\"\n      onSubmit={(event)=>{\n        event.preventDefault();\n        onSave({\n          ...taskInput,\n          labelColor: event.target[0].value,\n          description: event.target[1].value,\n        });\n      }}>\n        <Paper className={classes.paper} >\n          <Grid container spacing={0}>\n              <Grid item xs={12}>\n                <Select\n                  fullWidth\n                  id=\"categoryColorInput\"\n                  defaultValue={taskInput.labelColor}\n                >\n                  { \n                    menuOptions.map((menuItem)=>{\n                      return(\n                        <MenuItem value={menuItem}>\n                          <Box component=\"div\" className={classes.label} style={{backgroundColor: CATEGORY_COLOR[menuItem]}} />\n                        </MenuItem>\n                      );\n                    })\n                  }\n                </Select>  \n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  id=\"taskDescriptionInput\"\n                  multiline\n                  rows={4}\n                  fullWidth\n                  variant=\"outlined\"\n                  defaultValue={taskInput.description}\n                  className={classes.descriptionInput} \n                />  \n              </Grid>\n              <Grid item xs={9}>\n                <Button \n                  variant=\"contained\" \n                  color=\"primary\" \n                  type=\"submit\">\n                  Save\n                </Button>\n              </Grid>\n              <Grid item xs={3}>\n                <Button variant=\"contained\" onClick={onDelete}>\n                  Delete\n                </Button> \n              </Grid>\n          </Grid>\n        </Paper>\n      </form>\n    );\n  }\n  return (\n    <Dialog aria-labelledby=\"task-edit\" open={open} onClose={onClose}>\n      <CardGrid />\n    </Dialog>\n  );\n}\n\nconst taskShape = PropTypes.shape({\n  id: PropTypes.string,\n  labelColor: PropTypes.oneOf(['green', 'yellow', 'red']),\n  description: PropTypes.string\n});\n\nTaskCardForm.propTypes = {\n    task: taskShape,\n    onClose: PropTypes.func,\n    onSave: PropTypes.func,\n    onDelete: PropTypes.func,\n    onCancel: PropTypes.func,\n    open: PropTypes.bool \n};\n\nexport default TaskCardForm;\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Grid , Typography} from '@material-ui/core';\nimport ColumnCards from './ColumnCards';\nimport TaskCardForm from './TaskCardForm';\nimport PropTypes from 'prop-types';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    padding: theme.spacing(1),\n    flexGrow: 1,\n  },\n  titleApp:{\n    color: '#ffffff',\n    fontSize: '30px',\n    paddingLeft: '5px',\n    fontWeight: 400,\n    marginBottom: '5px',\n    marginTop: '10px',\n  }\n}));\n\nconst App = ({\n  columnTasks, \n  onAddTask,\n  onDeleteTask, \n  onEditCard,\n  onCancelEdit, \n  currentTask,\n  isEditionMode,\n  onSaveTask,\n  onDragItemTask,\n  onEditColumnName,\n}) => {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={3}>\n        <Grid item >\n          <Typography\n          className={classes.titleApp}\n          variant=\"h1\"\n          >\n            TASK MANAGEMENT BOARD\n          </Typography>\n        </Grid>\n      </Grid>\n      <Grid container spacing={3}>\n        {\n          columnTasks.length > 0 &&\n          columnTasks.map((column, idx)=>{\n            return(\n              <Grid item xs key={column.id}>\n                <ColumnCards \n                title={column.title} \n                cards={column.tasks} \n                onAddTask={()=> onAddTask(columnTasks, idx)}\n                onEditCard={(task)=> onEditCard(task)}\n                onDragItemTask={onDragItemTask}\n                columnTasks={columnTasks}\n                columnId={column.id}\n                onEditColumnName={onEditColumnName}\n                />\n              </Grid>\n            );\n          })\n        }\n      </Grid>\n      { \n        currentTask && \n        <TaskCardForm \n          task={currentTask}\n          onSave={(task)=> onSaveTask(task)}\n          onDelete={()=> onDeleteTask(currentTask.id)}\n          onClose={onCancelEdit}\n          onCancel={onCancelEdit}\n          open={isEditionMode}\n        />\n      }\n    </div>\n  );\n}\n\nApp.defaultProps = {\n  columnTasks:[],\n};\n\nApp.propTypes = {\n  columnTasks: PropTypes.array,\n  onAddTask: PropTypes.func.isRequired,\n  onDeleteTask: PropTypes.func.isRequired,\n  onEditCard: PropTypes.func.isRequired,\n  currentTask: PropTypes.shape({\n    id: PropTypes.string,\n    labelColor: PropTypes.string,\n    description: PropTypes.string\n  }),\n  isEditionMode: PropTypes.bool,\n  onCancelEdit: PropTypes.func.isRequired,\n  onSaveTask: PropTypes.func.isRequired,\n  onDragItemTask: PropTypes.func.isRequired,\n  onEditColumnName: PropTypes.func.isRequired,\n};\n\nexport default App;\n","export const SET_CURRENT_TASK = 'SET_CURRENT_TASK';\nexport const SET_TASK_LIST = 'SET_TASK_LIST';\nexport const SET_EDITION_MODE = 'SET_EDITION_MODE';\nexport const SAVE_TASK = 'SAVE_TASK';\nexport const REPLACE_ORDER_TASK = 'REPLACE_ORDER_TASK';\nexport const RENAME_COLUMN_NAME = 'RENAME_COLUMN_NAME';\nexport const DELETE_TASK = 'DELETE_TASK';\n\nexport const setCurrentTask = (task) => {\n  return {\n    type: SET_CURRENT_TASK,\n    task\n  };\n};\n\nexport const setTaskList = (list) => {\n  return {\n    type: SET_TASK_LIST,\n    list\n  };\n};\n\nexport const setEditionMode = (isEditionMode) => {\n  return {\n    type: SET_EDITION_MODE,\n    isEditionMode\n  };\n};\n\nexport const saveTask = (task) => {\n  return {\n    type: SAVE_TASK,\n    task\n  };\n};\n\nexport const deleteTask = (taskId) => {\n  return {\n    type: DELETE_TASK,\n    taskId\n  };\n};\n\nexport const replaceOrderTask = (originalTask, newTask, originalTaskColumnId, newTaskColumnId) => {\n  return {\n    type: REPLACE_ORDER_TASK,\n    originalTask,\n    newTask,\n    originalTaskColumnId,\n    newTaskColumnId,\n  };\n};\n\nexport const renameColumnById = (id, newName) => {\n  return {\n    type: RENAME_COLUMN_NAME,\n    id,\n    newName,\n  };\n};\n","import {\n  SET_CURRENT_TASK,\n  SET_TASK_LIST,\n  SET_EDITION_MODE,\n  SAVE_TASK,\n  REPLACE_ORDER_TASK,\n  RENAME_COLUMN_NAME,\n  DELETE_TASK,\n} from '../actions/task';\nimport {createSelector} from 'reselect';\nimport { v4 as uuidv4 } from 'uuid';\n\n\n\nlet columnTasks = [\n  {\n    id: uuidv4(),\n    title: \"Column 1\",\n    order: 1,\n    tasks: [\n      {\n          id: uuidv4(),\n          labelColor: 'green',\n          description: 'This is a Todo list with items that can be marked off',\n          order: 1,\n      },\n      {\n          id: uuidv4(),\n          labelColor: 'yellow',\n          description: 'You can categorize each item with a Color (Red, Yellow, Green)',\n          order: 2,\n      },\n      {\n          id: uuidv4(),\n          labelColor: 'red',\n          description: 'Hover on a item to edit',\n          order: 3\n      },\n    ],  \n  },\n  {\n    id: uuidv4(),\n    title: \"Column 2\",\n    order: 2,\n    tasks: [\n      {\n          id: uuidv4(),\n          labelColor: 'green',\n          description: 'You can click and drag items up and down the list',\n          order: 1,\n      },\n      {\n          id: uuidv4(),\n          labelColor: 'yellow',\n          description: 'As well drag items from one column to the other',\n          order: 2,\n      }\n    ],  \n  },\n  {\n    id: uuidv4(),\n    title: \"DONE\",\n    order: 3,\n    tasks: [\n      {\n          id: uuidv4(),\n          labelColor: 'red',\n          description: 'As well rename the Columns',\n          order: 1,\n      }\n    ]  \n  }\n];\n\nconst initState = {\n  current: null,\n  list: columnTasks,\n  isEditionMode: false,\n};\nconst byTaskOrder = (a,b) => (a.order > b.order) ? 1 : ((b.order > a.order) ? -1 : 0);\n\nexport const TaskReducer = (state = initState, action) => {\n  switch (action.type) {\n    case SET_CURRENT_TASK:\n      return {\n        ...state,\n        current: {...action.task}\n      };\n    case SET_TASK_LIST:\n      const taskListSet = {...action}.list.map((columnX)=>{\n        columnX.tasks = columnX.tasks.sort(byTaskOrder);\n        return columnX;\n      });\n      return {\n        ...state,\n        list: taskListSet,\n      }; \n    case SET_EDITION_MODE:\n      return {\n        ...state,\n        isEditionMode: action.isEditionMode\n      };\n    case SAVE_TASK:\n      const updatedTaskList = {...state}.list.map((columnX)=>{\n        columnX.tasks = columnX.tasks.map((taskX)=>{\n          return (taskX.id === action.task.id) ? action.task : taskX; \n        }).sort(byTaskOrder);\n        return columnX;\n      });\n      return {\n        ...state,\n        list: updatedTaskList,\n      };\n    case REPLACE_ORDER_TASK:\n      const allColumns = {...state}.list;\n      const orderSameColumn = (column) => {\n        const taskA = column.tasks.find(x => x.id === action.newTask.id);\n        const taskB = column.tasks.find(x => x.id === action.originalTask.id);\n        if(taskA && taskB){\n          taskA.order = action.originalTask.order;\n          taskB.order = action.newTask.order;\n          column.tasks = column.tasks.sort(byTaskOrder);\n        }\n        return column;\n      };\n      let replacedOrderTaskList = allColumns;\n      if( action.originalTaskColumnId === action.newTaskColumnId ){\n        replacedOrderTaskList = allColumns.map((columnX)=> {\n          if( action.originalTaskColumnId === columnX.id){\n            return orderSameColumn(columnX);\n          } \n          return columnX;\n        }); \n      }\n      if( action.originalTaskColumnId !== action.newTaskColumnId ){\n        replacedOrderTaskList = allColumns.map((columnX)=> {\n          if( action.originalTaskColumnId === columnX.id){\n            columnX.tasks = columnX.tasks.filter(x => x.id !== action.newTask.id).sort(byTaskOrder);\n          }\n          if( action.newTaskColumnId === columnX.id){\n            \n            const insertTask = {\n              ...action.newTask,\n              order: action.originalTask.order,\n            };\n            columnX.tasks.push(insertTask);\n            columnX.tasks = columnX.tasks.map(taskX => {\n              if(taskX.id === action.originalTask.id){\n                taskX.order = columnX.tasks.length;\n              }\n              return taskX\n            });\n            columnX.tasks = columnX.tasks.sort(byTaskOrder);\n          } \n          return columnX;\n        });\n      }\n      return {\n        ...state,\n        list: [...replacedOrderTaskList],\n      }; \n    case RENAME_COLUMN_NAME:\n      const columnUpdate = {...state}.list.map((columnX)=>{\n        if(columnX.id === action.id){\n          columnX.title = action.newName\n        }\n        return columnX;\n      });\n      return {\n        ...state,\n        list: [...columnUpdate],\n      };\n    case DELETE_TASK:\n      const deletedItemTaskList = {...state}.list.map((columnX)=> {\n        columnX.tasks = columnX.tasks.filter(x => x.id !== action.taskId).sort(byTaskOrder);\n        return columnX;\n      });  \n      return {\n        ...state,\n        list: [...deletedItemTaskList],\n      };  \n    default:\n      return state;\n  }\n}\n\nconst tasklistSelector = state => state.task.list;\nconst currentTaskSelector = state => state.task.current;\nconst isEditionModeSelector = state => state.task.isEditionMode;\n\n\nexport const getTaskList = createSelector(\n  tasklistSelector,\n  list => list\n);\n\nexport const getCurrentTask = createSelector(\n  currentTaskSelector,\n  task => task\n);\n\nexport const getIsEditionMode = createSelector(\n  isEditionModeSelector,\n  isEditionMode => isEditionMode\n);","import { connect } from 'react-redux';\nimport App from '../App';\nimport { \n    setTaskList, \n    setCurrentTask,\n    setEditionMode,\n    saveTask,\n    replaceOrderTask,\n    renameColumnById,\n    deleteTask,\n} from '../redux/actions/task';\nimport { \n    getTaskList,\n    getCurrentTask,\n    getIsEditionMode,\n} from \"../redux/reducers/task\";\nimport { v4 as uuidv4 } from 'uuid';\n\nconst mapStateToProps = state => {\n    return {\n        columnTasks: getTaskList(state),\n        currentTask: getCurrentTask(state),\n        isEditionMode: getIsEditionMode(state),\n    }\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAddTask: (columnTasks, idx)=> {\n            const newTask = {\n                id: uuidv4(), \n                labelColor: 'green',\n                description: '',\n            };\n            columnTasks[idx].tasks.push(newTask);\n            dispatch(setTaskList(columnTasks));\n            dispatch(setEditionMode(true));\n            dispatch(setCurrentTask(newTask));\n        },\n        onDeleteTask: (taskId)=> {\n           dispatch(deleteTask(taskId));\n           dispatch(setEditionMode(false)); \n        },\n        onEditCard:(task)=> {\n            dispatch(setEditionMode(true));\n            dispatch(setCurrentTask(task));\n        },\n        onCancelEdit:()=> {\n            dispatch(setEditionMode(false));\n        },\n        onSaveTask: (task)=> {\n            dispatch(saveTask(task));    \n            dispatch(setEditionMode(false));\n        },\n        onDragItemTask: (originalTask, newTask, originalTaskColumnId, newTaskColumnId)=> {\n            dispatch(replaceOrderTask({...originalTask}, {...newTask}, originalTaskColumnId, newTaskColumnId));\n        },\n        onEditColumnName:(id, newName)=> {\n            dispatch(renameColumnById(id, newName));    \n        },\n    };\n};\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(App);","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers } from 'redux';\nimport { TaskReducer } from './task';\n\nconst rootReducer = combineReducers({\n  task: TaskReducer,\n});\n\nexport default rootReducer;\n","import { createStore, compose } from 'redux';\nimport rootReducer from '../reducers/';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n  rootReducer,\n  composeEnhancers()\n);\n\nexport const MainStore = () => {\n  return store;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/AppContainer';\nimport reportWebVitals from './reportWebVitals';\nimport Provider from 'react-redux/es/components/Provider';\nimport { MainStore } from './redux/store/configureStore';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\n\nconst store = MainStore();\n\nReactDOM.render(\n  <DndProvider backend={HTML5Backend}>\n    <Provider store={store}>\n        <App /> \n    </Provider>\n  </DndProvider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}